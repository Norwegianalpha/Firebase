# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: mailchimp-extension
version: 0.1.0
specVersion: v1beta

displayName: Firebase Mailchimp Extension
description:
  Adds new users from Firebase Authentication to a specified Mailchimp audience.

license: Apache-2.0

sourceUrl: https://github.com/firebase/extensions/tree/master/auth-mailchimp-sync
releaseNotesUrl: https://github.com/firebase/extensions/blob/master/auth-mailchimp-sync/CHANGELOG.md

author:
  authorName: Firebase
  url: https://firebase.google.com

contributors:
  - authorName: Lauren Long
    url: https://github.com/laurenzlong
  - authorName: Chris Bianca
    email: chris@csfrequency.com
    url: https://github.com/chrisbianca
  - authorName: Invertase
    email: oss@invertase.io
    url: https://github.com/invertase
  - authorName: Amr Desouky
    email: desoukya@gmail.com
    url: https://github.com/desoukya

billingRequired: true

resources:
  - name: addUserToList
    type: firebaseextensions.v1beta.function
    description:
      Listens for new user accounts (as managed by Firebase Authentication),
      then automatically adds the new user to your specified MailChimp audience.
    properties:
      location: ${LOCATION}
      runtime: nodejs12
      eventTrigger:
        eventType: providers/firebase.auth/eventTypes/user.create
        resource: projects/${PROJECT_ID}

  - name: removeUserFromList
    type: firebaseextensions.v1beta.function
    description:
      Listens for existing user accounts to be deleted (as managed by Firebase
      Authentication), then automatically removes them from your specified
      MailChimp audience.
    properties:
      location: ${LOCATION}
      runtime: nodejs12
      eventTrigger:
        eventType: providers/firebase.auth/eventTypes/user.delete
        resource: projects/${PROJECT_ID}

  - name: memberTagsHandler
    type: firebaseextensions.v1beta.function
    description:
      Member Tags provide the ability to associate "metadata" or "labels" with a Mailchimp subscriber.
      The memberTagsHandler function listens for Firestore write events based on specified config path, 
      then automatically classifies the document data as Mailchimp subscriber tags.
    properties:
      location: ${LOCATION}
      runtime: nodejs12
      eventTrigger:
        eventType: providers/cloud.firestore/eventTypes/document.write
        resource: projects/${PROJECT_ID}/databases/(default)/documents/${MAILCHIMP_MEMBER_TAGS_WATCH_PATH}

  - name: mergeFieldsHandler
    type: firebaseextensions.v1beta.function
    description:
      Merge fields provide the ability to create new properties that can be associated with Mailchimp subscriber.
      The mergeFieldsHandler function listens for Firestore write events based on specified config path, 
      then automatically populates the Mailchimp subscriber's respective merge fields.
    properties:
      location: ${LOCATION}
      runtime: nodejs12
      eventTrigger:
        eventType: providers/cloud.firestore/eventTypes/document.write
        resource: projects/${PROJECT_ID}/databases/(default)/documents/${MAILCHIMP_MERGE_FIELDS_WATCH_PATH}

  - name: memberEventsHandler
    type: firebaseextensions.v1beta.function
    description:
      Member events are Mailchimp specific activity events that can be created and associated with a predefined action.
      The memberEventsHandler function Listens for Firestore write events based on specified config path, 
      then automatically uses the document data to create a Mailchimp event on the subscriber's profile 
      which can subsequently trigger automation workflows.
    properties:
      location: ${LOCATION}
      runtime: nodejs12
      eventTrigger:
        eventType: providers/cloud.firestore/eventTypes/document.write
        resource: projects/${PROJECT_ID}/databases/(default)/documents/${MAILCHIMP_MEMBER_EVENTS_WATCH_PATH}

params:
  - param: LOCATION
    label: Cloud Functions location
    description: >-
      Where do you want to deploy the functions created for this extension?
    type: select
    options:
      - label: Iowa (us-central1)
        value: us-central1
      - label: South Carolina (us-east1)
        value: us-east1
      - label: Northern Virginia (us-east4)
        value: us-east4
      - label: Los Angeles (us-west2)
        value: us-west2
      - label: Salt Lake City (us-west3)
        value: us-west3
      - label: Las Vegas (us-west4)
        value: us-west4
      - label: Belgium (europe-west1)
        value: europe-west1
      - label: London (europe-west2)
        value: europe-west2
      - label: Frankfurt (europe-west3)
        value: europe-west3
      - label: Zurich (europe-west6)
        value: europe-west6
      - label: Hong Kong (asia-east2)
        value: asia-east2
      - label: Tokyo (asia-northeast1)
        value: asia-northeast1
      - label: Osaka (asia-northeast2)
        value: asia-northeast2
      - label: Seoul (asia-northeast3)
        value: asia-northeast3
      - label: Mumbai (asia-south1)
        value: asia-south1
      - label: Jakarta (asia-southeast2)
        value: asia-southeast2
      - label: Montreal (northamerica-northeast1)
        value: northamerica-northeast1
      - label: Sao Paulo (southamerica-east1)
        value: southamerica-east1
      - label: Sydney (australia-southeast1)
        value: australia-southeast1
    default: us-central1
    required: true
    immutable: true

  - param: MAILCHIMP_API_KEY
    label: Mailchimp OAuth Token
    description: >-
      To obtain a Mailchimp OAuth Token, login to
      [Mailchimp](http://firebase.mailchimp.com/index.html).
    type: string
    example: a1b2c3d4e5f6g7
    required: true

  - param: MAILCHIMP_AUDIENCE_ID
    label: Audience ID
    description: >-
      What is the Mailchimp Audience ID to which you want to subscribe new
      users? To find your Audience ID: visit https://admin.mailchimp.com/lists,
      click on the desired audience or create a new audience, then select
      **Settings**. Look for **Audience ID** (for example, `27735fc60a`).
    type: string
    example: 1ab2345c67
    required: true

  - param: MAILCHIMP_CONTACT_STATUS
    label: Contact status
    description: >-
      When the extension adds a new user to the Mailchimp audience, what is
      their initial status? This value can be `subscribed` or `pending`.
      `subscribed` means the user can receive campaigns; `pending` means the
      user still needs to opt-in to receive campaigns.
    type: select
    options:
      - label: Subscribed
        value: subscribed
      - label: Pending
        value: pending
    default: subscribed
    required: true

  - param: MAILCHIMP_MEMBER_TAGS_WATCH_PATH
    label: Firebase Member Tags Watch Path
    description: Specify the Firestore collection to listen for member tag changes
    type: string
    example: registrations/{documentId}
    required: true    

  - param: MAILCHIMP_MEMBER_TAGS_CONFIG
    type: string
    label: Firebase Member Tags Config
    description: >-
      Provide a JSON configuration specifying which events in Firebase the extension 
      should listen on to associate Mailchimp member tags to a subscriber.

      Required Keys:
      
      1) `memberTags` - Indicates the Firestore document fields to retrieve data from and classify as subscriber tags in Mailchimp. Acceptable data types include:
      - Array\<String\> - The extenion will lookup the values in the provided fields, aggreagate them, and update the subcriber's member tags with the respective data values.
      - String - The extension will lookup the value in this specific field and update the subscriber's member tags with the provided value.

      2) `subscriberEmail` - The Firestore document field capturing the user email as is recognized by Mailchimp

    example: '{"memberTags": ["jobTitle", "domainKnowledge"], "subscriberEmail": "emailAddress"}'
    required: false

  - param: MAILCHIMP_MERGE_FIELDS_WATCH_PATH
    label: Firebase Merge Fields Watch Path
    description: Specify the Firestore collection to listen for merge field changes
    type: string
    example: registrations/{documentId}
    required: true    

  - param: MAILCHIMP_MERGE_FIELDS_CONFIG
    type: string
    label: Firebase Merge Fields Config
    description: >-
      Provide a JSON configuration specifying which events in Firebase the extension 
      should listen on to associate document data with the subscriber's merge fields.

      Required Keys:
      
      1) `mergeFields` - JSON mapping representing the Firestore document fields to associate with Mailchimp Merge Fields. Acceptable data types include:
      - Object - The keys represent the Firestore document fields and values indicate the merge fields they map to.

      2) `subscriberEmail` - The Firestore document field capturing the user email as is recognized by Mailchimp

    example: '{"mergeFields": {"firstName": "FNAME", "lastName": "LNAME", "phoneNumber": "PHONE", "courseName": "COURSE_NAM"}, "subscriberEmail": "emailAddress"}'
    required: false

  - param: MAILCHIMP_MEMBER_EVENTS_WATCH_PATH
    label: Firebase Member Events Watch Path
    description: Specify the Firestore collection to listen for member event changes
    type: string
    example: registrations/{documentId}
    required: true

  - param: MAILCHIMP_MEMBER_EVENTS_CONFIG
    type: string
    label: Firebase Member Events Config
    description: >-
      Provide a JSON configuration specifying which events in Firebase the extension 
      should listen on to associate document data with a particular event on the subscriber's profile. 

      Required Keys:

      1) `memberEvents` - Indicates the Firestore document fields to retrieve data from and classify as Mailchimp events on the subscriber's activity feed. Acceptable data types include:
      - Array\<String\> - The extenion will lookup the values (mailchimp event names) in the provided fields, aggreagate them, and post those events to Mailchimp on the subcriber's activity feed.
      - String - The extension will lookup the value (mailchimp event name) in this specific field and post the event to Mailchimp on the subcriber's activity feed.

      2) `subscriberEmail` - The Firestore document field capturing the user email as is recognized by Mailchimp
 
    example: '{"memberEvents": ["activity"], "subscriberEmail": "emailAddress"}'
    required: false
